{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mereb\\\\Documents\\\\git_repos\\\\TipTap\\\\TipTap\\\\frontend\\\\tiptap\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { myAxios } from \"../axios/axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { GoogleAuthProvider, confirmPasswordReset, createUserWithEmailAndPassword, onAuthStateChanged, sendPasswordResetEmail, signInWithEmailAndPassword, signInWithPopup, signOut } from \"firebase/auth\";\nimport { auth } from \"../firebase.js\";\nimport { useFetchAuth } from \"../fetches/FetchAuth.js\";\nimport { useMutation, useQuery } from \"react-query\";\nimport { Spinner } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport function UserContextProvider(props) {\n  _s();\n  const [userRole, setUserRole] = useState(0);\n  const [userObject, setUserObject] = useState({});\n  const [accessToken, setAccessToken] = useState(null);\n  const userObjectRole = useRef(0);\n  const [percentage, setPercentage] = useState(null);\n  const [data, setData] = useState({});\n  const googleUser = useRef([]);\n  const logoutMy = useRef(false);\n  const enableRefreshQuery = useRef(false);\n  const enableGoogleAuth = useRef(false);\n  const fetchAuth = useFetchAuth();\n  const googleProvider = new GoogleAuthProvider();\n  const logoutQuery = useQuery({\n    queryKey: [\"logoutQuery\"],\n    queryFn: async () => await fetchAuth.logout(),\n    enabled: logoutMy.current,\n    onSuccess: () => {\n      logoutMy.current = false;\n    }\n  });\n  const refreshQuery = useQuery({\n    queryKey: [\"refreshQuery\"],\n    queryFn: async () => await myAxios.get(\"http://localhost:8081/refresh\", {\n      withCredentials: true\n    }),\n    enabled: enableRefreshQuery.current,\n    onSuccess: data => {\n      if (data.status === \"Success\") {\n        //On est connecté redirect vers la response(c'est forcément un worker)\n      } else {\n        //On logout de google et on affiche un message d'erreur\n      }\n      enableRefreshQuery.current = false;\n    }\n  });\n  const googleMutation = useMutation({\n    mutationFn: async () => await fetchAuth.googleAuth(googleUser.auth.email),\n    onSuccess: data => {\n      console.log(\"merebe\", data);\n      if (data.status === \"Success\") {\n        setAccessToken(data.accessToken);\n        console.log(\"success\");\n        //navigate(data.response);\n      }\n\n      enableGoogleAuth.current = false;\n    }\n  });\n  async function signOutMy() {\n    logoutMy.current = true;\n  }\n  async function refresh() {\n    enableRefreshQuery.current = true;\n  }\n  function selectRole(userRole) {\n    setUserRole(userRole);\n  }\n  function signUp(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password);\n  }\n  function signIn(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n  function forgotPassword(email) {\n    return sendPasswordResetEmail(auth, email);\n  }\n  function resetPassword(oobCode, newPassword) {\n    return confirmPasswordReset(auth, oobCode, newPassword);\n  }\n  function signOutFirebase() {\n    return signOut(auth);\n  }\n  async function signInWithGoogle() {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const googleCredential = GoogleAuthProvider.credentialFromResult(result);\n      const googleToken = googleCredential.accessToken;\n      // The signed-in user info.\n      googleUser.current = result.user;\n      console.log(result.user);\n      console.log(\"pas d'erreur\");\n      // Try to connect in Node.js db\n      googleMutation.mutate();\n\n      // Execute googleQuery here or set a flag to enable it in the useEffect\n      // depending on your use case\n      // enableGoogleAuth.current = true;\n    } catch (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      // const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      console.log(\"erreur\", errorCode, errorMessage);\n      // ...\n    }\n  }\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loadingData, setLoadingData] = useState(true);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, currentUser => {\n      setCurrentUser(currentUser);\n      setLoadingData(false);\n    });\n    return unsubscribe;\n  }, []);\n  useEffect(() => {\n    //Check if there is a JWT Token, if not automatically logout user from Firebase\n    if (accessToken) {\n      console.log(\"token\", jwtDecode(accessToken));\n      setUserObject(jwtDecode(accessToken));\n    }\n  }, [accessToken]);\n  useEffect(() => {\n    !accessToken && refresh();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userRole,\n      selectRole,\n      signUp,\n      signIn,\n      currentUser,\n      forgotPassword,\n      resetPassword,\n      userObject,\n      setUserObject,\n      percentage,\n      setPercentage,\n      data,\n      setData,\n      userObjectRole,\n      accessToken,\n      setAccessToken,\n      refresh,\n      logoutQuery,\n      signOutMy,\n      signOutFirebase,\n      signInWithGoogle\n    },\n    children: !loadingData && !refreshQuery.isLoading ? props.children : /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(UserContextProvider, \"2L1VD/2JyGdgEH5tImz0MMzhC9s=\", false, function () {\n  return [useFetchAuth, useQuery, useQuery, useMutation];\n});\n_c = UserContextProvider;\nexport function useUserContext() {\n  _s2();\n  const {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle\n  } = useContext(UserContext);\n  return {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle\n  };\n}\n_s2(useUserContext, \"mWixtM7fHBX8wzFl+xY2vHIhhSM=\");\nvar _c;\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useState","myAxios","jwtDecode","GoogleAuthProvider","confirmPasswordReset","createUserWithEmailAndPassword","onAuthStateChanged","sendPasswordResetEmail","signInWithEmailAndPassword","signInWithPopup","signOut","auth","useFetchAuth","useMutation","useQuery","Spinner","jsxDEV","_jsxDEV","UserContext","UserContextProvider","props","_s","userRole","setUserRole","userObject","setUserObject","accessToken","setAccessToken","userObjectRole","percentage","setPercentage","data","setData","googleUser","logoutMy","enableRefreshQuery","enableGoogleAuth","fetchAuth","googleProvider","logoutQuery","queryKey","queryFn","logout","enabled","current","onSuccess","refreshQuery","get","withCredentials","status","googleMutation","mutationFn","googleAuth","email","console","log","signOutMy","refresh","selectRole","signUp","password","signIn","forgotPassword","resetPassword","oobCode","newPassword","signOutFirebase","signInWithGoogle","result","googleCredential","credentialFromResult","googleToken","user","mutate","error","errorCode","code","errorMessage","message","credential","credentialFromError","currentUser","setCurrentUser","loadingData","setLoadingData","unsubscribe","Provider","value","children","isLoading","animation","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUserContext","_s2","$RefreshReg$"],"sources":["C:/Users/mereb/Documents/git_repos/TipTap/TipTap/frontend/tiptap/src/contexts/AuthContext.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { myAxios } from \"../axios/axios\";\n\nimport { jwtDecode } from \"jwt-decode\";\n\nimport {\n  GoogleAuthProvider,\n  confirmPasswordReset,\n  createUserWithEmailAndPassword,\n  onAuthStateChanged,\n  sendPasswordResetEmail,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  signOut,\n} from \"firebase/auth\";\nimport { auth } from \"../firebase.js\";\nimport { useFetchAuth } from \"../fetches/FetchAuth.js\";\nimport { useMutation, useQuery } from \"react-query\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport const UserContext = createContext();\n\nexport function UserContextProvider(props) {\n  const [userRole, setUserRole] = useState(0);\n  const [userObject, setUserObject] = useState({});\n  const [accessToken, setAccessToken] = useState(null);\n  const userObjectRole = useRef(0);\n  const [percentage, setPercentage] = useState(null);\n  const [data, setData] = useState({});\n  const googleUser = useRef([]);\n  const logoutMy = useRef(false);\n  const enableRefreshQuery = useRef(false);\n  const enableGoogleAuth = useRef(false);\n  const fetchAuth = useFetchAuth();\n  const googleProvider = new GoogleAuthProvider();\n\n  const logoutQuery = useQuery({\n    queryKey: [\"logoutQuery\"],\n    queryFn: async () => await fetchAuth.logout(),\n    enabled: logoutMy.current,\n    onSuccess: () => {\n      logoutMy.current = false;\n    },\n  });\n\n  const refreshQuery = useQuery({\n    queryKey: [\"refreshQuery\"],\n    queryFn: async () =>\n      await myAxios.get(\"http://localhost:8081/refresh\", {\n        withCredentials: true,\n      }),\n    enabled: enableRefreshQuery.current,\n    onSuccess: (data) => {\n      if (data.status === \"Success\") {\n        //On est connecté redirect vers la response(c'est forcément un worker)\n      } else {\n        //On logout de google et on affiche un message d'erreur\n      }\n      enableRefreshQuery.current = false;\n    },\n  });\n\n  const googleMutation = useMutation({\n    mutationFn: async () => await fetchAuth.googleAuth(googleUser.auth.email),\n    onSuccess: (data) => {\n      console.log(\"merebe\", data);\n      if (data.status === \"Success\") {\n        setAccessToken(data.accessToken);\n        console.log(\"success\");\n        //navigate(data.response);\n      }\n      enableGoogleAuth.current = false;\n    },\n  });\n\n  async function signOutMy() {\n    logoutMy.current = true;\n  }\n\n  async function refresh() {\n    enableRefreshQuery.current = true;\n  }\n\n  function selectRole(userRole) {\n    setUserRole(userRole);\n  }\n\n  function signUp(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password);\n  }\n\n  function signIn(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n  function forgotPassword(email) {\n    return sendPasswordResetEmail(auth, email);\n  }\n  function resetPassword(oobCode, newPassword) {\n    return confirmPasswordReset(auth, oobCode, newPassword);\n  }\n\n  function signOutFirebase() {\n    return signOut(auth);\n  }\n\n  async function signInWithGoogle() {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const googleCredential = GoogleAuthProvider.credentialFromResult(result);\n      const googleToken = googleCredential.accessToken;\n      // The signed-in user info.\n      googleUser.current = result.user;\n      console.log(result.user);\n      console.log(\"pas d'erreur\");\n      // Try to connect in Node.js db\n      googleMutation.mutate();\n\n      // Execute googleQuery here or set a flag to enable it in the useEffect\n      // depending on your use case\n      // enableGoogleAuth.current = true;\n    } catch (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      // const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      console.log(\"erreur\", errorCode, errorMessage);\n      // ...\n    }\n  }\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loadingData, setLoadingData] = useState(true);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n      setCurrentUser(currentUser);\n      setLoadingData(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  useEffect(() => {\n    //Check if there is a JWT Token, if not automatically logout user from Firebase\n    if (accessToken) {\n      console.log(\"token\", jwtDecode(accessToken));\n      setUserObject(jwtDecode(accessToken));\n    }\n  }, [accessToken]);\n\n  useEffect(() => {\n    !accessToken && refresh();\n  }, []);\n\n  return (\n    <UserContext.Provider\n      value={{\n        userRole,\n        selectRole,\n        signUp,\n        signIn,\n        currentUser,\n        forgotPassword,\n        resetPassword,\n        userObject,\n        setUserObject,\n        percentage,\n        setPercentage,\n        data,\n        setData,\n        userObjectRole,\n        accessToken,\n        setAccessToken,\n        refresh,\n        logoutQuery,\n        signOutMy,\n        signOutFirebase,\n        signInWithGoogle,\n      }}\n    >\n      {!loadingData && !refreshQuery.isLoading ? (\n        props.children\n      ) : (\n        <Spinner animation=\"border\" />\n      )}\n    </UserContext.Provider>\n  );\n}\n\nexport function useUserContext() {\n  const {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle,\n  } = useContext(UserContext);\n\n  return {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}