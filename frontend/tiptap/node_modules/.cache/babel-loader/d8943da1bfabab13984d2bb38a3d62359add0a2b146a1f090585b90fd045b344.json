{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mereb\\\\Documents\\\\git_repos\\\\TipTap\\\\TipTap\\\\frontend\\\\tiptap\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { myAxios } from \"../axios/axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { GoogleAuthProvider, confirmPasswordReset, createUserWithEmailAndPassword, onAuthStateChanged, sendPasswordResetEmail, signInWithEmailAndPassword, signInWithPopup, signOut } from \"firebase/auth\";\nimport { auth } from \"../firebase.js\";\nimport { useFetchAuth } from \"../fetches/FetchAuth.js\";\nimport { useQuery } from \"react-query\";\nimport { Spinner } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport function UserContextProvider(props) {\n  _s();\n  const [userRole, setUserRole] = useState(0);\n  const [userObject, setUserObject] = useState({});\n  const [accessToken, setAccessToken] = useState(null);\n  const userObjectRole = useRef(0);\n  const [percentage, setPercentage] = useState(null);\n  const [data, setData] = useState({});\n  const googleUser = useRef({});\n  const logoutMy = useRef(false);\n  const enableRefreshQuery = useRef(false);\n  const enableGoogleAuth = useRef(false);\n  const fetchAuth = useFetchAuth();\n  const googleProvider = new GoogleAuthProvider();\n  const logoutQuery = useQuery({\n    queryKey: [\"logoutQuery\"],\n    queryFn: async () => await fetchAuth.logout(),\n    enabled: logoutMy.current,\n    onSuccess: () => {\n      logoutMy.current = false;\n    }\n  });\n  const refreshQuery = useQuery({\n    queryKey: [\"refreshQuery\"],\n    queryFn: async () => await myAxios.get(\"http://localhost:8081/refresh\", {\n      withCredentials: true\n    }),\n    enabled: enableRefreshQuery.current,\n    onSuccess: data => {\n      if (data.status === \"Success\") {\n        //On est connecté redirect vers la response(c'est forcément un worker)\n      } else {\n        //On logout de google et on affiche un message d'erreur\n      }\n      enableRefreshQuery.current = false;\n    }\n  });\n  const googleQuery = useQuery({\n    queryKey: [\"googleQuery\"],\n    queryFn: async () => await fetchAuth.googleAuth(googleUser.auth.email),\n    enabled: enableGoogleAuth.current,\n    onSuccess: data => {\n      console.log(\"merebe\", data);\n      if (data.status === \"Success\") {\n        setAccessToken(data.accessToken);\n        console.log(\"success\");\n        //navigate(data.response);\n      }\n\n      enableGoogleAuth.current = false;\n    }\n  });\n  async function signOutMy() {\n    logoutMy.current = true;\n  }\n  async function refresh() {\n    enableRefreshQuery.current = true;\n  }\n  function selectRole(userRole) {\n    setUserRole(userRole);\n  }\n  function signUp(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password);\n  }\n  function signIn(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n  function forgotPassword(email) {\n    return sendPasswordResetEmail(auth, email);\n  }\n  function resetPassword(oobCode, newPassword) {\n    return confirmPasswordReset(auth, oobCode, newPassword);\n  }\n  function signOutFirebase() {\n    return signOut(auth);\n  }\n  async function signInWithGoogle() {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const googleCredential = GoogleAuthProvider.credentialFromResult(result);\n      const googleToken = googleCredential.accessToken;\n      // The signed-in user info.\n      googleUser.current = result.user;\n      console.log(result.user);\n      console.log(\"pas d'erreur\");\n      // Try to connect in Node.js db\n      enableGoogleAuth.current = true;\n      console.log(\"enableGoogleAuth.current:\", enableGoogleAuth.current);\n\n      // Execute googleQuery here or set a flag to enable it in the useEffect\n      // depending on your use case\n      // enableGoogleAuth.current = true;\n    } catch (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      // const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      console.log(\"erreur\", errorCode, errorMessage);\n      // ...\n    }\n  }\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loadingData, setLoadingData] = useState(true);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, currentUser => {\n      setCurrentUser(currentUser);\n      setLoadingData(false);\n    });\n    return unsubscribe;\n  }, []);\n  useEffect(() => {\n    //Check if there is a JWT Token, if not automatically logout user from Firebase\n    if (accessToken) {\n      console.log(\"token\", jwtDecode(accessToken));\n      setUserObject(jwtDecode(accessToken));\n    }\n  }, [accessToken]);\n  useEffect(() => {\n    !accessToken && refresh();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userRole,\n      selectRole,\n      signUp,\n      signIn,\n      currentUser,\n      forgotPassword,\n      resetPassword,\n      userObject,\n      setUserObject,\n      percentage,\n      setPercentage,\n      data,\n      setData,\n      userObjectRole,\n      accessToken,\n      setAccessToken,\n      refresh,\n      logoutQuery,\n      signOutMy,\n      signOutFirebase,\n      signInWithGoogle,\n      googleQuery\n    },\n    children: !loadingData && !refreshQuery.isLoading ? props.children : /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n_s(UserContextProvider, \"JUWcKGjUdWEfzRWe1/kO3mskD1g=\", false, function () {\n  return [useFetchAuth, useQuery, useQuery, useQuery];\n});\n_c = UserContextProvider;\nexport function useUserContext() {\n  _s2();\n  const {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle,\n    googleQuery\n  } = useContext(UserContext);\n  return {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle,\n    googleQuery\n  };\n}\n_s2(useUserContext, \"RdxIenTt4DIfux8yILZHiyYvnEI=\");\nvar _c;\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useState","myAxios","jwtDecode","GoogleAuthProvider","confirmPasswordReset","createUserWithEmailAndPassword","onAuthStateChanged","sendPasswordResetEmail","signInWithEmailAndPassword","signInWithPopup","signOut","auth","useFetchAuth","useQuery","Spinner","jsxDEV","_jsxDEV","UserContext","UserContextProvider","props","_s","userRole","setUserRole","userObject","setUserObject","accessToken","setAccessToken","userObjectRole","percentage","setPercentage","data","setData","googleUser","logoutMy","enableRefreshQuery","enableGoogleAuth","fetchAuth","googleProvider","logoutQuery","queryKey","queryFn","logout","enabled","current","onSuccess","refreshQuery","get","withCredentials","status","googleQuery","googleAuth","email","console","log","signOutMy","refresh","selectRole","signUp","password","signIn","forgotPassword","resetPassword","oobCode","newPassword","signOutFirebase","signInWithGoogle","result","googleCredential","credentialFromResult","googleToken","user","error","errorCode","code","errorMessage","message","credential","credentialFromError","currentUser","setCurrentUser","loadingData","setLoadingData","unsubscribe","Provider","value","children","isLoading","animation","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUserContext","_s2","$RefreshReg$"],"sources":["C:/Users/mereb/Documents/git_repos/TipTap/TipTap/frontend/tiptap/src/contexts/AuthContext.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { myAxios } from \"../axios/axios\";\n\nimport { jwtDecode } from \"jwt-decode\";\n\nimport {\n  GoogleAuthProvider,\n  confirmPasswordReset,\n  createUserWithEmailAndPassword,\n  onAuthStateChanged,\n  sendPasswordResetEmail,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  signOut,\n} from \"firebase/auth\";\nimport { auth } from \"../firebase.js\";\nimport { useFetchAuth } from \"../fetches/FetchAuth.js\";\nimport { useQuery } from \"react-query\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport const UserContext = createContext();\n\nexport function UserContextProvider(props) {\n  const [userRole, setUserRole] = useState(0);\n  const [userObject, setUserObject] = useState({});\n  const [accessToken, setAccessToken] = useState(null);\n  const userObjectRole = useRef(0);\n  const [percentage, setPercentage] = useState(null);\n  const [data, setData] = useState({});\n  const googleUser = useRef({});\n  const logoutMy = useRef(false);\n  const enableRefreshQuery = useRef(false);\n  const enableGoogleAuth = useRef(false);\n  const fetchAuth = useFetchAuth();\n  const googleProvider = new GoogleAuthProvider();\n\n  const logoutQuery = useQuery({\n    queryKey: [\"logoutQuery\"],\n    queryFn: async () => await fetchAuth.logout(),\n    enabled: logoutMy.current,\n    onSuccess: () => {\n      logoutMy.current = false;\n    },\n  });\n\n  const refreshQuery = useQuery({\n    queryKey: [\"refreshQuery\"],\n    queryFn: async () =>\n      await myAxios.get(\"http://localhost:8081/refresh\", {\n        withCredentials: true,\n      }),\n    enabled: enableRefreshQuery.current,\n    onSuccess: (data) => {\n      if (data.status === \"Success\") {\n        //On est connecté redirect vers la response(c'est forcément un worker)\n      } else {\n        //On logout de google et on affiche un message d'erreur\n      }\n      enableRefreshQuery.current = false;\n    },\n  });\n\n  const googleQuery = useQuery({\n    queryKey: [\"googleQuery\"],\n    queryFn: async () => await fetchAuth.googleAuth(googleUser.auth.email),\n    enabled: enableGoogleAuth.current,\n    onSuccess: (data) => {\n      console.log(\"merebe\", data);\n      if (data.status === \"Success\") {\n        setAccessToken(data.accessToken);\n        console.log(\"success\");\n        //navigate(data.response);\n      }\n      enableGoogleAuth.current = false;\n    },\n  });\n\n  async function signOutMy() {\n    logoutMy.current = true;\n  }\n\n  async function refresh() {\n    enableRefreshQuery.current = true;\n  }\n\n  function selectRole(userRole) {\n    setUserRole(userRole);\n  }\n\n  function signUp(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password);\n  }\n\n  function signIn(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n  function forgotPassword(email) {\n    return sendPasswordResetEmail(auth, email);\n  }\n  function resetPassword(oobCode, newPassword) {\n    return confirmPasswordReset(auth, oobCode, newPassword);\n  }\n\n  function signOutFirebase() {\n    return signOut(auth);\n  }\n\n  async function signInWithGoogle() {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const googleCredential = GoogleAuthProvider.credentialFromResult(result);\n      const googleToken = googleCredential.accessToken;\n      // The signed-in user info.\n      googleUser.current = result.user;\n      console.log(result.user);\n      console.log(\"pas d'erreur\");\n      // Try to connect in Node.js db\n      enableGoogleAuth.current = true;\n      console.log(\"enableGoogleAuth.current:\", enableGoogleAuth.current);\n\n      // Execute googleQuery here or set a flag to enable it in the useEffect\n      // depending on your use case\n      // enableGoogleAuth.current = true;\n    } catch (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      // const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      console.log(\"erreur\", errorCode, errorMessage);\n      // ...\n    }\n  }\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loadingData, setLoadingData] = useState(true);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n      setCurrentUser(currentUser);\n      setLoadingData(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  useEffect(() => {\n    //Check if there is a JWT Token, if not automatically logout user from Firebase\n    if (accessToken) {\n      console.log(\"token\", jwtDecode(accessToken));\n      setUserObject(jwtDecode(accessToken));\n    }\n  }, [accessToken]);\n\n  useEffect(() => {\n    !accessToken && refresh();\n  }, []);\n\n  return (\n    <UserContext.Provider\n      value={{\n        userRole,\n        selectRole,\n        signUp,\n        signIn,\n        currentUser,\n        forgotPassword,\n        resetPassword,\n        userObject,\n        setUserObject,\n        percentage,\n        setPercentage,\n        data,\n        setData,\n        userObjectRole,\n        accessToken,\n        setAccessToken,\n        refresh,\n        logoutQuery,\n        signOutMy,\n        signOutFirebase,\n        signInWithGoogle,\n        googleQuery,\n      }}\n    >\n      {!loadingData && !refreshQuery.isLoading ? (\n        props.children\n      ) : (\n        <Spinner animation=\"border\" />\n      )}\n    </UserContext.Provider>\n  );\n}\n\nexport function useUserContext() {\n  const {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle,\n    googleQuery,\n  } = useContext(UserContext);\n\n  return {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle,\n    googleQuery,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}