{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mereb\\\\Documents\\\\git_repos\\\\TipTap\\\\TipTap\\\\frontend\\\\tiptap\\\\src\\\\contexts\\\\fetches-contexts\\\\StaffContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState, createContext, useRef } from \"react\";\nimport { getAllStaff } from \"../../fetches/FetchStaff\";\nimport { getUser } from \"../../fetches/FetchUsers\";\nimport { useQuery } from \"react-query\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StaffContext = /*#__PURE__*/createContext();\nexport function StaffContextProvider(props) {\n  _s();\n  const staffObject = useRef({});\n  const [staffListFilter, setStaffListFilter] = useState([{}]);\n  const [staffList, setStaffList] = useState([{}]);\n  const [loadingData, setLoadingData] = useState(true);\n  const roleMap = [\"Chef\", \"Waiter\", \"Cleaner\"];\n  const staffQuery = useQuery({\n    queryKey: [\"staff\"],\n    queryFn: () => getAllStaff()\n  });\n  const getStaffResponse = staffQuery.data;\n  async function fetchData() {\n    if (loadingData === false) {\n      const newStaffList = [];\n      for (var i = 0; i < getStaffResponse.response.length; i++) {\n        const getUserResponse = await getUser(getStaffResponse.response[i].ID_user);\n        if (getUserResponse.status === \"Success\") {\n          newStaffList.push({\n            role: roleMap[getStaffResponse.response[i].role] || \"Unknown\",\n            stars: getStaffResponse.response[i].stars,\n            firstName: getUserResponse.response[0].firstName,\n            lastName: getUserResponse.response[0].lastName,\n            pictureUrl: getUserResponse.response[0].pictureUrl\n          });\n        }\n      }\n      setStaffList(newStaffList);\n      setStaffListFilter(newStaffList);\n    }\n  }\n  fetchData();\n  return /*#__PURE__*/_jsxDEV(StaffContext.Provider, {\n    value: {\n      staffObject,\n      staffListFilter,\n      setStaffListFilter,\n      staffList,\n      setStaffList\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(StaffContextProvider, \"mTEoeUiF3k8kivkHJsU8lA/7FKM=\", false, function () {\n  return [useQuery];\n});\n_c = StaffContextProvider;\nexport function useStaffContext() {\n  _s2();\n  const {\n    staffObject,\n    staffListFilter,\n    setStaffListFilter,\n    staffList,\n    setStaffList\n  } = useContext(StaffContext);\n  return {\n    staffObject,\n    staffListFilter,\n    setStaffListFilter,\n    staffList,\n    setStaffList\n  };\n}\n_s2(useStaffContext, \"Q6gA77CP1Nf7YxHhQxtiUG5d5kA=\");\nvar _c;\n$RefreshReg$(_c, \"StaffContextProvider\");","map":{"version":3,"names":["React","useContext","useState","createContext","useRef","getAllStaff","getUser","useQuery","jsxDEV","_jsxDEV","StaffContext","StaffContextProvider","props","_s","staffObject","staffListFilter","setStaffListFilter","staffList","setStaffList","loadingData","setLoadingData","roleMap","staffQuery","queryKey","queryFn","getStaffResponse","data","fetchData","newStaffList","i","response","length","getUserResponse","ID_user","status","push","role","stars","firstName","lastName","pictureUrl","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStaffContext","_s2","$RefreshReg$"],"sources":["C:/Users/mereb/Documents/git_repos/TipTap/TipTap/frontend/tiptap/src/contexts/fetches-contexts/StaffContext.js"],"sourcesContent":["import React, { useContext, useState, createContext, useRef } from \"react\";\r\nimport { getAllStaff } from \"../../fetches/FetchStaff\";\r\nimport { getUser } from \"../../fetches/FetchUsers\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nexport const StaffContext = createContext();\r\n\r\nexport function StaffContextProvider(props) {\r\n  const staffObject = useRef({});\r\n  const [staffListFilter, setStaffListFilter] = useState([{}]);\r\n  const [staffList, setStaffList] = useState([{}]);\r\n  const [loadingData, setLoadingData] = useState(true);\r\n\r\n  const roleMap = [\"Chef\", \"Waiter\", \"Cleaner\"];\r\n\r\n  const staffQuery = useQuery({\r\n    queryKey: [\"staff\"],\r\n    queryFn: () => getAllStaff(),\r\n  });\r\n\r\n  const getStaffResponse = staffQuery.data;\r\n\r\n  async function fetchData() {\r\n    if (loadingData === false) {\r\n      const newStaffList = [];\r\n      for (var i = 0; i < getStaffResponse.response.length; i++) {\r\n        const getUserResponse = await getUser(\r\n          getStaffResponse.response[i].ID_user\r\n        );\r\n        if (getUserResponse.status === \"Success\") {\r\n          newStaffList.push({\r\n            role: roleMap[getStaffResponse.response[i].role] || \"Unknown\",\r\n            stars: getStaffResponse.response[i].stars,\r\n            firstName: getUserResponse.response[0].firstName,\r\n            lastName: getUserResponse.response[0].lastName,\r\n            pictureUrl: getUserResponse.response[0].pictureUrl,\r\n          });\r\n        }\r\n      }\r\n      setStaffList(newStaffList);\r\n      setStaffListFilter(newStaffList);\r\n    }\r\n  }\r\n  fetchData();\r\n\r\n  return (\r\n    <StaffContext.Provider\r\n      value={{\r\n        staffObject,\r\n        staffListFilter,\r\n        setStaffListFilter,\r\n        staffList,\r\n        setStaffList,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </StaffContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useStaffContext() {\r\n  const {\r\n    staffObject,\r\n    staffListFilter,\r\n    setStaffListFilter,\r\n    staffList,\r\n    setStaffList,\r\n  } = useContext(StaffContext);\r\n\r\n  return {\r\n    staffObject,\r\n    staffListFilter,\r\n    setStaffListFilter,\r\n    staffList,\r\n    setStaffList,\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}