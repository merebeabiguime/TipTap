{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mereb\\\\Documents\\\\git_repos\\\\TipTap\\\\TipTap\\\\frontend\\\\tiptap\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { myAxios } from \"../axios/axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { GoogleAuthProvider, confirmPasswordReset, createUserWithEmailAndPassword, onAuthStateChanged, sendPasswordResetEmail, signInWithEmailAndPassword, signInWithPopup, signOut } from \"firebase/auth\";\nimport { auth } from \"../firebase.js\";\nimport { useFetchAuth } from \"../fetches/FetchAuth.js\";\nimport { useMutation, useQuery } from \"react-query\";\nimport { Spinner } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport function UserContextProvider(props) {\n  _s();\n  const [userRole, setUserRole] = useState(0);\n  const [userObject, setUserObject] = useState({});\n  const [accessToken, setAccessToken] = useState(null);\n  const userObjectRole = useRef(0);\n  const [percentage, setPercentage] = useState(null);\n  const [data, setData] = useState({});\n  const googleUser = useRef([]);\n  const logoutMy = useRef(false);\n  const enableRefreshQuery = useRef(false);\n  const enableGoogleAuth = useRef(false);\n  const fetchAuth = useFetchAuth();\n  const googleProvider = new GoogleAuthProvider();\n  const loginMutationId = useRef(null);\n  const navigateTo = useRef(\"\");\n  const logoutQuery = useQuery({\n    queryKey: [\"logoutQuery\"],\n    queryFn: async () => await fetchAuth.logout(),\n    enabled: logoutMy.current,\n    onSuccess: () => {\n      logoutMy.current = false;\n    }\n  });\n  const refreshQuery = useQuery({\n    queryKey: [\"refreshQuery\"],\n    queryFn: async () => await myAxios.get(\"http://localhost:8081/refresh\", {\n      withCredentials: true\n    }),\n    enabled: enableRefreshQuery.current,\n    onSuccess: data => {\n      if (data.status === \"Success\") {\n        //On est connecté redirect vers la response(c'est forcément un worker)\n      } else {\n        //On logout de google et on affiche un message d'erreur\n      }\n      enableRefreshQuery.current = false;\n    }\n  });\n  const googleMutation = useMutation({\n    mutationFn: async () => await fetchAuth.googleAuth(googleUser.current[0]),\n    onSuccess: data => {\n      console.log(\"merebe\", data);\n      if (data.status === \"Success\") {\n        setAccessToken(data.accessToken);\n        console.log(\"success\");\n        loginMutationId.current = googleUser.current[0].uid;\n      }\n      enableGoogleAuth.current = false;\n    }\n  });\n  const loginMutation = useMutation({\n    mutationFn: async () => await fetchAuth.login(loginMutationId.current),\n    onSuccess: data => {\n      console.log(\"login mutation corect\");\n      if (data.status === \"Success\") {\n        setAccessToken(data.accessToken);\n        navigateTo.current = data.response;\n        console.log(\"successfull\");\n      } else {\n        setValidation(data.response);\n        console.log(\"unsucessfull\");\n        navigateTo.current = data.response;\n      }\n    }\n  });\n  async function signOutMy() {\n    logoutMy.current = true;\n  }\n  async function refresh() {\n    enableRefreshQuery.current = true;\n  }\n  function selectRole(userRole) {\n    setUserRole(userRole);\n  }\n  function signUp(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password);\n  }\n  function signIn(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n  function forgotPassword(email) {\n    return sendPasswordResetEmail(auth, email);\n  }\n  function resetPassword(oobCode, newPassword) {\n    return confirmPasswordReset(auth, oobCode, newPassword);\n  }\n  function signOutFirebase() {\n    return signOut(auth);\n  }\n  async function signInWithGoogle() {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const googleCredential = GoogleAuthProvider.credentialFromResult(result);\n      const googleToken = googleCredential.accessToken;\n      // The signed-in user info.\n      googleUser.current.push(result.user);\n      console.log(\"google user\", googleUser.current[0].auth);\n      console.log(result.user);\n      console.log(\"pas d'erreur\");\n      // Try to connect in Node.js db\n      googleMutation.mutate();\n\n      // Execute googleQuery here or set a flag to enable it in the useEffect\n      // depending on your use case\n      // enableGoogleAuth.current = true;\n    } catch (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      // const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      console.log(\"erreur\", errorCode, errorMessage);\n      // ...\n    }\n  }\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loadingData, setLoadingData] = useState(true);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, currentUser => {\n      setCurrentUser(currentUser);\n      setLoadingData(false);\n    });\n    return unsubscribe;\n  }, []);\n  useEffect(() => {\n    //Check if there is a JWT Token, if not automatically logout user from Firebase\n    if (accessToken) {\n      console.log(\"token\", jwtDecode(accessToken));\n      setUserObject(jwtDecode(accessToken));\n    }\n  }, [accessToken]);\n  useEffect(() => {\n    !accessToken && refresh();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userRole,\n      selectRole,\n      signUp,\n      signIn,\n      currentUser,\n      forgotPassword,\n      resetPassword,\n      userObject,\n      setUserObject,\n      percentage,\n      setPercentage,\n      data,\n      setData,\n      userObjectRole,\n      accessToken,\n      setAccessToken,\n      refresh,\n      logoutQuery,\n      signOutMy,\n      signOutFirebase,\n      signInWithGoogle,\n      loginMutationId,\n      navigateTo\n    },\n    children: !loadingData && !refreshQuery.isLoading ? props.children : /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_s(UserContextProvider, \"wKOEiOHsXh1oqOd505ZAWDJbOxA=\", false, function () {\n  return [useFetchAuth, useQuery, useQuery, useMutation, useMutation];\n});\n_c = UserContextProvider;\nexport function useUserContext() {\n  _s2();\n  const {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle,\n    loginMutationId,\n    navigateTo\n  } = useContext(UserContext);\n  return {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle,\n    loginMutationId,\n    navigateTo\n  };\n}\n_s2(useUserContext, \"kpnPNql3HBN9YOKj+BhwBat5b+E=\");\nvar _c;\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useState","myAxios","jwtDecode","GoogleAuthProvider","confirmPasswordReset","createUserWithEmailAndPassword","onAuthStateChanged","sendPasswordResetEmail","signInWithEmailAndPassword","signInWithPopup","signOut","auth","useFetchAuth","useMutation","useQuery","Spinner","jsxDEV","_jsxDEV","UserContext","UserContextProvider","props","_s","userRole","setUserRole","userObject","setUserObject","accessToken","setAccessToken","userObjectRole","percentage","setPercentage","data","setData","googleUser","logoutMy","enableRefreshQuery","enableGoogleAuth","fetchAuth","googleProvider","loginMutationId","navigateTo","logoutQuery","queryKey","queryFn","logout","enabled","current","onSuccess","refreshQuery","get","withCredentials","status","googleMutation","mutationFn","googleAuth","console","log","uid","loginMutation","login","response","setValidation","signOutMy","refresh","selectRole","signUp","email","password","signIn","forgotPassword","resetPassword","oobCode","newPassword","signOutFirebase","signInWithGoogle","result","googleCredential","credentialFromResult","googleToken","push","user","mutate","error","errorCode","code","errorMessage","message","credential","credentialFromError","currentUser","setCurrentUser","loadingData","setLoadingData","unsubscribe","Provider","value","children","isLoading","animation","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUserContext","_s2","$RefreshReg$"],"sources":["C:/Users/mereb/Documents/git_repos/TipTap/TipTap/frontend/tiptap/src/contexts/AuthContext.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { myAxios } from \"../axios/axios\";\n\nimport { jwtDecode } from \"jwt-decode\";\n\nimport {\n  GoogleAuthProvider,\n  confirmPasswordReset,\n  createUserWithEmailAndPassword,\n  onAuthStateChanged,\n  sendPasswordResetEmail,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  signOut,\n} from \"firebase/auth\";\nimport { auth } from \"../firebase.js\";\nimport { useFetchAuth } from \"../fetches/FetchAuth.js\";\nimport { useMutation, useQuery } from \"react-query\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport const UserContext = createContext();\n\nexport function UserContextProvider(props) {\n  const [userRole, setUserRole] = useState(0);\n  const [userObject, setUserObject] = useState({});\n  const [accessToken, setAccessToken] = useState(null);\n  const userObjectRole = useRef(0);\n  const [percentage, setPercentage] = useState(null);\n  const [data, setData] = useState({});\n  const googleUser = useRef([]);\n  const logoutMy = useRef(false);\n  const enableRefreshQuery = useRef(false);\n  const enableGoogleAuth = useRef(false);\n  const fetchAuth = useFetchAuth();\n  const googleProvider = new GoogleAuthProvider();\n  const loginMutationId = useRef(null);\n  const navigateTo = useRef(\"\");\n\n  const logoutQuery = useQuery({\n    queryKey: [\"logoutQuery\"],\n    queryFn: async () => await fetchAuth.logout(),\n    enabled: logoutMy.current,\n    onSuccess: () => {\n      logoutMy.current = false;\n    },\n  });\n\n  const refreshQuery = useQuery({\n    queryKey: [\"refreshQuery\"],\n    queryFn: async () =>\n      await myAxios.get(\"http://localhost:8081/refresh\", {\n        withCredentials: true,\n      }),\n    enabled: enableRefreshQuery.current,\n    onSuccess: (data) => {\n      if (data.status === \"Success\") {\n        //On est connecté redirect vers la response(c'est forcément un worker)\n      } else {\n        //On logout de google et on affiche un message d'erreur\n      }\n      enableRefreshQuery.current = false;\n    },\n  });\n\n  const googleMutation = useMutation({\n    mutationFn: async () => await fetchAuth.googleAuth(googleUser.current[0]),\n    onSuccess: (data) => {\n      console.log(\"merebe\", data);\n      if (data.status === \"Success\") {\n        setAccessToken(data.accessToken);\n        console.log(\"success\");\n\n        loginMutationId.current = googleUser.current[0].uid;\n      }\n      enableGoogleAuth.current = false;\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async () => await fetchAuth.login(loginMutationId.current),\n    onSuccess: (data) => {\n      console.log(\"login mutation corect\");\n      if (data.status === \"Success\") {\n        setAccessToken(data.accessToken);\n        navigateTo.current = data.response;\n        console.log(\"successfull\");\n      } else {\n        setValidation(data.response);\n        console.log(\"unsucessfull\");\n        navigateTo.current = data.response;\n      }\n    },\n  });\n\n  async function signOutMy() {\n    logoutMy.current = true;\n  }\n\n  async function refresh() {\n    enableRefreshQuery.current = true;\n  }\n\n  function selectRole(userRole) {\n    setUserRole(userRole);\n  }\n\n  function signUp(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password);\n  }\n\n  function signIn(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n  function forgotPassword(email) {\n    return sendPasswordResetEmail(auth, email);\n  }\n  function resetPassword(oobCode, newPassword) {\n    return confirmPasswordReset(auth, oobCode, newPassword);\n  }\n\n  function signOutFirebase() {\n    return signOut(auth);\n  }\n\n  async function signInWithGoogle() {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const googleCredential = GoogleAuthProvider.credentialFromResult(result);\n      const googleToken = googleCredential.accessToken;\n      // The signed-in user info.\n      googleUser.current.push(result.user);\n      console.log(\"google user\", googleUser.current[0].auth);\n      console.log(result.user);\n      console.log(\"pas d'erreur\");\n      // Try to connect in Node.js db\n      googleMutation.mutate();\n\n      // Execute googleQuery here or set a flag to enable it in the useEffect\n      // depending on your use case\n      // enableGoogleAuth.current = true;\n    } catch (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      // const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      console.log(\"erreur\", errorCode, errorMessage);\n      // ...\n    }\n  }\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loadingData, setLoadingData] = useState(true);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n      setCurrentUser(currentUser);\n      setLoadingData(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  useEffect(() => {\n    //Check if there is a JWT Token, if not automatically logout user from Firebase\n    if (accessToken) {\n      console.log(\"token\", jwtDecode(accessToken));\n      setUserObject(jwtDecode(accessToken));\n    }\n  }, [accessToken]);\n\n  useEffect(() => {\n    !accessToken && refresh();\n  }, []);\n\n  return (\n    <UserContext.Provider\n      value={{\n        userRole,\n        selectRole,\n        signUp,\n        signIn,\n        currentUser,\n        forgotPassword,\n        resetPassword,\n        userObject,\n        setUserObject,\n        percentage,\n        setPercentage,\n        data,\n        setData,\n        userObjectRole,\n        accessToken,\n        setAccessToken,\n        refresh,\n        logoutQuery,\n        signOutMy,\n        signOutFirebase,\n        signInWithGoogle,\n        loginMutationId,\n        navigateTo,\n      }}\n    >\n      {!loadingData && !refreshQuery.isLoading ? (\n        props.children\n      ) : (\n        <Spinner animation=\"border\" />\n      )}\n    </UserContext.Provider>\n  );\n}\n\nexport function useUserContext() {\n  const {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle,\n    loginMutationId,\n    navigateTo,\n  } = useContext(UserContext);\n\n  return {\n    userRole,\n    selectRole,\n    signUp,\n    signIn,\n    currentUser,\n    forgotPassword,\n    resetPassword,\n    userObject,\n    setUserObject,\n    percentage,\n    setPercentage,\n    data,\n    setData,\n    userObjectRole,\n    accessToken,\n    setAccessToken,\n    refresh,\n    logoutQuery,\n    signOutMy,\n    signOutFirebase,\n    signInWithGoogle,\n    loginMutationId,\n    navigateTo,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}